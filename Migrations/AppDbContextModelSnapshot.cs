// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherMap.Data;

#nullable disable

namespace WeatherMap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WeatherMap.Models.DailyForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PrecipitationProbability")
                        .HasColumnType("int");

                    b.Property<double?>("PrecipitationSum")
                        .HasColumnType("double");

                    b.Property<double?>("TemperatureMax")
                        .HasColumnType("double");

                    b.Property<double?>("TemperatureMin")
                        .HasColumnType("double");

                    b.Property<int?>("WeatherCode")
                        .HasColumnType("int");

                    b.Property<string>("WeatherDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("WeatherHistoryId")
                        .HasColumnType("int");

                    b.Property<double?>("WindSpeedMax")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("WeatherHistoryId");

                    b.ToTable("DailyForecasts");
                });

            modelBuilder.Entity("WeatherMap.Models.WeatherHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Humidity")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<double?>("PrecipitationSum")
                        .HasColumnType("double");

                    b.Property<string>("RawJson")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("TemperatureCurrent")
                        .HasColumnType("double");

                    b.Property<double?>("TemperatureMax")
                        .HasColumnType("double");

                    b.Property<double?>("TemperatureMin")
                        .HasColumnType("double");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WeatherHistories");
                });

            modelBuilder.Entity("WeatherMap.Models.DailyForecast", b =>
                {
                    b.HasOne("WeatherMap.Models.WeatherHistory", "WeatherHistory")
                        .WithMany("DailyForecasts")
                        .HasForeignKey("WeatherHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherHistory");
                });

            modelBuilder.Entity("WeatherMap.Models.WeatherHistory", b =>
                {
                    b.Navigation("DailyForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
